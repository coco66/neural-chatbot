(1) build ADJ model, use session input file, outputs <input_file>_ADJ.gen

commandline
python main.py --model=ADJ BUILD tests/session_test.ctx --gen_sug=True


(2) Determine suggestion queries for all queries from other sessions
		Use input file from previous step
		output file: <input_file>+_ADJ.gen

commandline
python main.py --model=ADJ SCORE tests/session_test.ctx_ADJ.gen 


(3) Determine final ADJ SCORE through (re)ranking of query co-occurences
		Use 2 input files from previous steps
		order: (1) *.ctx (2) *.ctx_<model>.gen
commandline
python main.py --model=ADJ SCORE tests/session_test.ctx_ADJ.mdl tests/session_test.ctx tests/session_test.ctx_ADJ.gen


(4) Create features LEN (1) character count of candidate queries (each) (2) word count of each candiate query (3) total session length (in queries) 
		not for a specific model

commandline
python main.py --model=LEN SCORE tests/session_test.ctx tests/session_test.ctx tests/session_test.ctx_ADJ.gen 


	(4) last Levenshtein distance and (5) average Levenshtein distance
commandline
python main.py --model=LEV SCORE tests/session_test.ctx tests/session_test.ctx tests/session_test.ctx_ADJ.gen 


we add 10 features corresponding to the character n-gram similarity between the suggestion and the 10 most recent queries in the context.